% INFORMATION SECTION TO ADAPT;
clearvas; clc;
locdata = 'XXX'; % the location of the raw EEG data;
addpath(locdata); cd(locdata)
log_dir = 'XXX'; subj_list = dir([log_dir,'*.mat']);

load layout.mat;

% the name of the participant, TO CHANGE EVERY TIME !!!;
partname = 'francescaxxxxxx';

% Load data: make sure you have the 3 files generated by Brain Vision in the correct folder for each participant: eeg., .vhdr and .vmrk
cfg = [];
cfg.dataset = [locdata partname,'.vhdr'];
dat = ft_preprocessing(cfg);
 
% Select only EEG channels;
cfg = [];
cfg.channel = [1:34, 1];
dat = ft_selectdata(cfg, dat);

% Defining epochs with triggers and Segment.
cfg.continuous = 'yes';
cfg.bsfilter = 'yes';
cfg.bsfreq = [48 52; 98 102]; %OPTIONAL frequencies for band-stop filtering<br>
cfg.lpfilter = 'yes';
cfg.lpfreq = 140;
data_filtered = ft_preprocessing(cfg,dat);

% Define epoch length time-locked to trigger onset, eventtype and name of triggers to find;
cfg = [];
cfg.trialdef.prestim = 2; 
cfg.trialdef.poststim = 2; 
cfg.trialdef.eventtype  = 'Stimulus';
cfg.trialdef.eventvalue = {'S111'; 'S112';'S211'; 'S212';'S121'; 'S122';'S221'; 'S222'}; % define triggers name of interest.
cfg.dataset = [locdata partname '.vhdr'];
trialdef = ft_definetrial(cfg); 

% Making epochs;
cfg = [];
cfg.trl = trialdef.trl; 
data_cut = ft_redefinetrial(cfg, data_filtered); 

% Put information of every trial;
triggerInfos = data_cut.trialinfo;
for i = 1 : numel(triggerInfos)

    if data_cut.trialinfo(i,1) == 111 || data_cut.trialinfo(i,1) == 112 || data_cut.trialinfo(i,1) == 211 || data_cut.trialinfo(i,1) == 212 

            trialstructure{i,1}.expe = 'L1N';
            trialstructure{i,1}.trigger = triggerInfos(i,1);
            trialstructure{i,1}.condition = 1;
            trialstructure{i,1}.trial_num = logfile.trial_num(i);
            trialstructure{i,1}.hit = logfile.cr(i);
            trialstructure{i,1}.word = 'non-cognate';

    elseif data_cut.trialinfo(i,1) == 121 || data_cut.trialinfo(i,1) == 122 || data_cut.trialinfo(i,1) == 221 || data_cut.trialinfo(i,1) == 222 

            trialstructure{i,1}.expe = 'L1N';
            trialstructure{i,1}.trigger = triggerInfos(i,1);
            trialstructure{i,1}.condition = 2;
            trialstructure{i,1}.trial_num = logfile.trial_num(i);
            trialstructure{i,1}.hit = logfile.cr(i);
            trialstructure{i,1}.word = 'cognate';
            
    end
end

data_cut.trialinfo = trialstructure;   
clear res_data triggerInfos trialstructure

% Save your before artifact rejection;
save([locdata '\data_cut_' partname], 'data_cut', '-V7.3');

%%
% ICA detection and visual artifact rejection;
cfg = [];
cfg.runica.pca = 33;
cfg.method = 'runica';
comp = ft_componentanalysis(cfg, data_cut);

% visualize the different components;
cfg = [];
cfg.viewmode = 'component';
cfg.layout = 'layout.mat'; 
ft_databrowser(cfg, comp);

% Remove the components of interest;
cfg = [];
cfg.component = [1 2]; % ENTER THE COMPONENT TO BE REMOVED FOR THAT PARTICIPANT; 
data_no_artifact = ft_rejectcomponent(cfg,comp);

cfg = [];
cfg.latency = [0 0.5];
visual_art = ft_selectdata(cfg,data_noICA);

cfg = [];
cfg.layout = 'layout.mat';
cfg.ylim = [-100 100];
cfg.showlabel = 'yes';
cfg.channel = 'all';
cfg.gradscale = 0.04;
cfg.continuous = 'no';
cfg.viewmode = 'butterfly';
cfg.artfctdef.reject = 'complete';
cfg_databrowser = ft_databrowser(cfg, visual_art);
data_no_artifact = ft_rejectartifact(cfg_databrowser, data_no_artifact);

cfg = [];
cfg.method = 'triangulation';
cfg.layout = 'layout.mat';
cfg.channel = 'all';
cfg.feedback = 'yes';
cfg.neighbours = ft_prepare_neighbours(cfg);
cfg.badchannel = {'T3'}; % ENTER the name of the bad electrodes FOR THAT PARTICIPANT. Important: separate channels by ";" in the cell-array.
cfg.method = 'nearest';
data_no_artifact = ft_channelrepair(cfg, data_no_artifact);
close all;

% cfg = [];
% cfg.layout = 'layout.mat';
% cfg.renderer = 'painters';
% cfg.compscale = 'local';
% cfg.ylim = [-100 100];
% ft_databrowser(cfg, data_no_artifact);

% Final semi-automatic visual rejections;
cfg=[];
cfg.metric = 'zvalue'; 
cfg.method = 'summary';
cfg.layout = lay;
cfg.artfctdef.reject = 'complete';
data_noICA_trm = ft_rejectvisual(cfg,data_no_artifact);

% re-reference signal;
cfg = [];
cfg.reref = 'yes';
cfg.refchannel = 'all'; 
data_clean = ft_preprocessing(cfg, data_noICA_trm);

% Save your cleaned data ready for ERP analyses.
save([locdata 'data_clean_' partname], 'data_clean', '-V7.3');
clc; clear all;

%%